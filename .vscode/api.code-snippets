{
  "Insert post handler": {
    "prefix": "insertPostHandler",
    "body": [
      "import { type NextRequest } from \"next/server\";",
      "import { z } from \"zod\";",
      "",
      "import { db } from \"~/server/db\";",
      "",
      "import { ServerError, getReqBody, withAuth } from \"~/lib/server\";",
      "import type { CustomUser } from \"~/server/auth\";",
      "",
      "export const $1Input = '';",
      "",
      "export async function $1Handler(req: NextRequest, session: CustomUser) {",
      "  const input = await getReqBody(req, $1Input);",
      "",
      "  if (!input.success) {",
      "    throw new ServerError({",
      "      code: \"BAD_REQUEST\",",
      "      message: JSON.stringify(input.error.issues),",
      "      cause: \"TypeError\",",
      "    });",
      "  }",
      "",
      "  $2",
      "}",
      "",
      "export async function POST(req: NextRequest) {",
      "  return withAuth(req, $1Handler);",
      "}",
    ],
    "description": "Post handler",
  },
  "Insert get handler": {
    "prefix": "insertGetHandler",
    "body": [
      "import { type NextRequest } from \"next/server\";",
      "",
      "import { db } from \"~/server/db\";",
      "import { CustomUser } from \"~/server/auth\";",
      "",
      "import { ServerError, withAuth } from \"~/lib/server\";",
      "",
      "export async function $1Handler(req: NextRequest, session: CustomUser) {",
      "  $2",
      "}",
      "",
      "export async function GET(req: NextRequest) {",
      "  return withAuth(req, $1Handler);",
      "}",
    ],
    "description": "Get handler",
  },
  "Insert mutation caller": {
    "prefix": "insertMutationCaller",
    "body": [
      "import { type UseMutationOptions, useMutation } from \"@tanstack/react-query\";",
      "import { type z } from \"zod\";",
      "",
      "import { type QueryError } from \"~/lib/server\";",
      "",
      "type Res = Awaited<ReturnType<typeof $1Handler>>;",
      "",
      "type Props = z.infer<typeof $1Input>;",
      "",
      "const $2Fn = async (body: Props): Promise<Res> => {",
      "  const response = await fetch(\"/api/$3\", {",
      "    method: \"POST\",",
      "    credentials: \"include\",",
      "    body: JSON.stringify(body),",
      "  });",
      "  if (!response.ok) {",
      "    throw new Error(\"Failed to fetch /$3\");",
      "  }",
      "  return response.json();",
      "};",
      "",
      "const $2 = (opts?: Omit<UseMutationOptions<Res, QueryError, Props>, \"mutationFn\" | \"mutationkey\">) => {",
      "  // eslint-disable-next-line react-hooks/rules-of-hooks",
      "  return useMutation<Res, QueryError, Props>({",
      "    mutationKey: opts?.mutationKey ?? [\"$2\"],",
      "    mutationFn: (body) => $2Fn(body),",
      "    ...opts",
      "  });",
      "};",
      "",
      "export default $2;",
    ],
    "description": "mutation caller",
  },
  "Insert query caller": {
    "prefix": "insertQueryCaller",
    "body": [
      "import { type UseQueryOptions, useQuery } from \"@tanstack/react-query\";",
      "",
      "import { type QueryError } from \"~/lib/server\";",
      "",
      "type Res = Awaited<ReturnType<typeof $1Handler>>;",
      "",
      "export const $2Fn = async (): Promise<Res> => {",
      "  const response = await fetch(\"/api/$3\", {",
      "    method: \"GET\",",
      "    credentials: \"include\",",
      "  });",
      "  if (!response.ok) {",
      "    throw new Error(\"Failed to fetch /$3\");",
      "  }",
      "  return response.json();",
      "};",
      "",
      "const $2 = (opts?: Omit<UseQueryOptions<Res, QueryError>, \"queryFn\" | \"queryKey\">) => {",
      "  // eslint-disable-next-line react-hooks/rules-of-hooks",
      "  return useQuery<Res, QueryError>({",
      "    queryKey: [\"$2\"],",
      "    queryFn: () => $2Fn(),",
      "    refetchOnWindowFocus: false,",
      "    ...opts",
      "  });",
      "};",
      "",
      "export default $2;",
    ],
    "description": "Query caller",
  },
  "Insert query caller with data": {
    "prefix": "insertQueryCallerWithData",
    "body": [
      "import { type UseQueryOptions, useQuery } from \"@tanstack/react-query\";",
      "import type { z } from \"zod\"",
      "",
      "import { type QueryError } from \"~/lib/server\";",
      "",
      "type Res = Awaited<ReturnType<typeof $1Handler>>;",
      "",
      "type Props = z.infer<typeof $1Input>;",
      "",
      "export const $2Fn = async (body: Props): Promise<Res> => {",
      "  const response = await fetch(\"/api/$3\", {",
      "    method: \"POST\",",
      "    credentials: \"include\",",
      "    body: JSON.stringify(body),",
      "  });",
      "  if (!response.ok) {",
      "    throw new Error(\"Failed to fetch /$3\");",
      "  }",
      "  return response.json();",
      "};",
      "",
      "const $2 = (body: Props, opts?: Omit<UseQueryOptions<Res, QueryError>, \"queryFn\" | \"queryKey\">) => {",
      "  // eslint-disable-next-line react-hooks/rules-of-hooks",
      "  return useQuery<Res, QueryError>({",
      "    queryKey: [\"$2\", body],",
      "    queryFn: () => $2Fn(body),",
      "    refetchOnWindowFocus: false,",
      "    ...opts",
      "  });",
      "};",
      "",
      "export default $2;",
    ],
    "description": "Query caller with data",
  },
  "Insert Infinity query caller": {
    "prefix": "insertInfinityQuery",
    "body": [
      "import {",
      "  type UseInfiniteQueryOptions,",
      "  useInfiniteQuery,",
      "} from \"@tanstack/react-query\";",
      "import type { z } from \"zod\";",
      "",
      "import { type QueryError } from \"~/lib/server\";",
      "",
      "type Res = Awaited<ReturnType<typeof $1Handler>>;",
      "type Props = z.infer<typeof $1Input>;",
      "",
      "const $2Fn = async (body: Props): Promise<Res> => {",
      "  const response = await fetch(\"/api/$3\", {",
      "    method: \"POST\",",
      "    credentials: \"include\",",
      "    body: JSON.stringify(body),",
      "  });",
      "",
      "  if (!response.ok) {",
      "    throw new Error(\"Failed to fetch /$3\");",
      "  }",
      "",
      "  return response.json();",
      "};",
      "",
      "const $2 = (",
      "  body: Props,",
      "  opts?: Omit<",
      "    UseInfiniteQueryOptions<Res, QueryError>,",
      "    \"queryFn\" | \"queryKey\" | \"initialPageParam\" | \"getNextPageParam\"",
      "  >,",
      ") => {",
      "  // eslint-disable-next-line react-hooks/rules-of-hooks",
      "  return useInfiniteQuery<Res, QueryError>({",
      "    queryKey: [\"$2\"],",
      "    queryFn: ({ pageParam = body.cursor }) => getLeaderboardFn({ ...body, cursor: pageParam as Props[\"cursor\"] }),",
      "    initialPageParam: body.cursor ?? undefined,",
      "    getNextPageParam: (data) => data.nextCursor,",
      "    ...opts,",
      "    select: (data) => ({",
      "      pages: data.pages,",
      "      pageParams: data.pageParams,",
      "      nextCursor: data.pages[data.pages.length - 1]?.nextCursor",
      "    }),",
      "  });",
      "};",
      "",
      "export default getLeaderboard;",
    ],
    "description": "Infinity Query caller",
  },
  "Server GET caller": {
    "prefix": "insertServerGETCaller",
    "body": [
      "\"server only\";",
      "",
      "import { headers } from \"next/headers\";",
      "",
      "type Res = Awaited<ReturnType<typeof $1>>;",
      "",
      "export const $2 = async (): Promise<Res> => {",
      "  const headersList = headers();",
      "  const host = headersList.get(\"host\");",
      "  const clientCookie = headersList.get(\"Cookie\");",
      "  ",
      "  const response = await fetch(`http://\\${host}/api/$3`, {",
      "    method: \"GET\",",
      "    headers: {",
      "      Cookie: clientCookie ?? \"\",",
      "    },",
      "  });",
      "",
      "  if (!response.ok) {",
      "    throw new Error(\"Failed to fetch $3\");",
      "  }",
      "",
      "  return await response.json();",
      "};",
      "",
      "export default $2;",
    ],
    "description": "Server GET caller",
  },
  "Server POST caller": {
    "prefix": "insertServerPOSTCaller",
    "body": [
      "\"server only\";",
      "",
      "import { headers } from \"next/headers\";",
      "import { type z } from \"zod\";",
      "",
      "type Res = Awaited<ReturnType<typeof $1Handler>>;",
      "",
      "type Props = z.infer<typeof $1Input>;",
      "",
      "export const $2 = async (body: Props): Promise<Res> => {",
      "  const headersList = headers();",
      "  const host = headersList.get(\"host\");",
      "  const clientCookie = headersList.get(\"Cookie\");",
      "  ",
      "  const response = await fetch(`http://\\${host}/api/$3`, {",
      "    method: \"POST\",",
      "    body: JSON.stringify(body),",
      "    headers: {",
      "      Cookie: clientCookie ?? \"\",",
      "    },",
      "  });",
      "",
      "  if (!response.ok) {",
      "    throw new Error(\"Failed to fetch $3\");",
      "  }",
      "",
      "  return await response.json();",
      "};",
      "",
      "export default $2;",
    ],
    "description": "Server POST caller",
  },
}
